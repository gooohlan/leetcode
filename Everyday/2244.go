package Everyday

// 假设某个任务有c个,问题就会变成每轮减少2或者3,需要多少次变成0
// 假设c = 10, 3+3+2+2 =10 需要4轮
// 为了尽快处理完,劲量多的「减少3」
// 如果 c = 1, 无法完成, 返回 -1
// 如果 c = 3K(k> = 1), 每次都「减少」即可, 次数为 c/3
// 如果 c = 3k+1, 就需要用 2 次「减少2」,c = 3(k-1)+4, 次数就变成了 (c-4)/3+2 = (c+2)/3 = 向上取整(c/3), 因为c=3k+1, (c+2)/3 = (3k+3)/3 = k+1
// 如果 c = 3k+2, 就需要 1 次「减少2」, 次数变成了(c-2)/3+1 = (c+1)/3 = 向上取整(c/3), 因为c=3k+2, (c+1)/3 = (3k+3)/3 = k+1
// 所以, 因为始终是c向上取整除以2,所以可以写为 (c+2)/3
func minimumRounds(tasks []int) int {
    cnt := make(map[int]int)
    for _, t := range tasks {
        cnt[t]++
    }

    res := 0
    for _, c := range cnt {
        if c == 1 {
            return -1
        }
        res += (c + 2) / 3
    }
    return res
}
